--[[    Character Sheet Template    by: MrStump

You can set up your own character sheet if you follow these steps.

Step 1) Change the character sheet image
    -Right click on the character sheet, click Custom
    -Replace the image URL with one for your character sheet
    -Click import, make sure your sheet loads
    -SAVE THE GAME (the table setup)
    -LOAD FROM THAT SAVE YOU JUST MADE

Step 2) Edit script to fit your character sheet
    -Below you will see some general options, and then the big data table
    -The data table is what determines how many of which buttons are made
        -Checkboxes
        -Counters
        -Textboxes
    -By default, there are 3 of each. You can add more or remove entries
    -If you intend to add/remove, be sure only to add/remove ENTRIES
        -This is what an entry looks like:
            {
                pos   = {-0.977,0.1,-0.589},
                size  = 800,
                state = false
            },
        -Deleting the whole thing would remove that specific item on the sheet
        -Copy and pasting it after another entry would create another
    -Each entry type has unique data points (pos, size, state, etc)
        -Do not try to add in your own data points or remove them individually
        -There is a summary of what each point does at the top of its category

Step 3) Save and check script changes
    -Hit Save & Apply in the script window to save your code
    -You can edit your code as needed and Save+Apply as often as needed
    -When you are finished, make disableSave = false below then Save+apply
        -This enables saving, so your sheet will remember whats on it.

Bonus) Finding/Editing Positions for elements
    I have included a tool to get positions for buttons in {x,y,z} form
    Place it where you want the center of your element to be
    Then copy the table from the notes (lower right of screen)
        You can highlight it and CTRL+C
    Paste it into the data table where needed (pos=)
    If you want to manually tweek the values:
        {0,0,0} is the center of the character sheet
        {1,0,0} is right, {-1,0,0} is left
        {0,0,-1} is up, {0,0,1} is down
        0.1 for Y is the height off of the page.
            If it was 0, it would be down inside the model of the sheet

Begin editing below:    ]]
character_name = "Marksman"
-- url = "https://api.notion.com/v1/databases/f27043ccecf249068c94c0491b0e29af/query"
url = "https://api.notion.com/v1/databases/"

-- session ID varaibel holder
sessionID = ""

--Set this to true while editing and false when you have finished
disableSave = false
--Remember to set this to false once you are done making changes
--Then, after you save & apply it, save your game too

--Color information for button text (r,g,b, values of 0-1)
buttonFontColor = {0,0,0}
--Color information for button background
buttonColor = {1,1,1}
--Change scale of button (Avoid changing if possible)
buttonScale = {0.2,0.2,0.2}

--This is the button placement information
defaultButtonData = {
    --Add checkboxes
    checkbox = {
        --[[
        pos   = the position (pasted from the helper tool)
        size  = height/width/font_size for checkbox
        state = default starting value for checkbox (true=checked, false=not)
        ]]
        --Commander 1
        {
            pos   = {0.048,0.05,-1.3},
            size  = 200,
            state = false
        },
        --Commander 2
        {
            pos   = {0.048,0.05,-1.17},
            size  = 200,
            state = false
        },
        --Commander 3
        {
            pos   = {0.048,0.05,-1.04},
            size  = 200,
            state = false
        },
        --Commander 4
        {
            pos   = {0.048,0.05,-0.91},
            size  = 200,
            state = false
        },
        --Commander 5
        {
            pos   = {0.048,0.05,-0.78},
            size  = 200,
            state = false
        },
        --Commander 6
        {
            pos   = {0.048,0.05,-0.65},
            size  = 200,
            state = false
        },
        --Commander 7
        {
            pos   = {0.048,0.05,-0.52},
            size  = 200,
            state = false
        },
        --Commander 8
        {
            pos   = {0.048,0.05,-0.39},
            size  = 200,
            state = false
        },
        --Iron Legion 1
        {
            pos   = {0.048,0.05,0.0},
            size  = 200,
            state = false
        },
        --Iron Legion 2
        {
            pos   = {0.048,0.05,0.13},
            size  = 200,
            state = false
        },
        --Iron Legion 3
        {
            pos   = {0.048,0.05,0.255},
            size  = 200,
            state = false
        },
        --Iron Legion 4
        {
            pos   = {0.048,0.05,0.385},
            size  = 200,
            state = false
        },
        --Iron Legion 5
        {
            pos   = {0.048,0.05,0.51},
            size  = 200,
            state = false
        },
        --Iron Legion 6
        {
            pos   = {0.048,0.05,0.64},
            size  = 200,
            state = false
        },
        --Iron Legion 7
        {
            pos   = {0.048,0.05,0.76},
            size  = 200,
            state = false
        },
        --Iron Legion 8
        {
            pos   = {0.048,0.05,0.89},
            size  = 200,
            state = false
        },
        --Guardian 1
        {
            pos   = {0.048,0.05,1.26},
            size  = 200,
            state = false
        },
        --Guardian 2
        {
            pos   = {0.048,0.05,1.39},
            size  = 200,
            state = false
        },
        --Guardian 3
        {
            pos   = {0.048,0.05,1.52},
            size  = 200,
            state = false
        },
        --Guardian 4
        {
            pos   = {0.048,0.05,1.65},
            size  = 200,
            state = false
        },
        --Guarian 5
        {
            pos   = {0.048,0.05,1.775},
            size  = 200,
            state = false
        },
        --Guarian 6
        {
            pos   = {0.048,0.05,1.905},
            size  = 200,
            state = false
        },
        --Guarian 7
        {
            pos   = {0.048,0.05,2.025},
            size  = 200,
            state = false
        },
        --Guarian 8
        {
            pos   = {0.048,0.05,2.155},
            size  = 200,
            state = false
        },
        --End of checkboxes
    },
    --Add counters that have a + and - button
    counter = {
        --[[
        pos    = the position (pasted from the helper tool)
        size   = height/width/font_size for counter
        value  = default starting value for counter
        hideBG = if background of counter is hidden (true=hidden, false=not)
        ]]
        --exp
        {
            pos    = {-0.719,0.05,-1.223},
            size   = 800,
            value  = 0,
            hideBG = true
        },
        --End of counters
    },
    --Add editable text boxes
    textbox = {
        --[[
        pos       = the position (pasted from the helper tool)
        rows      = how many lines of text you want for this box
        width     = how wide the text box is
        font_size = size of text. This and "rows" effect overall height
        label     = what is shown when there is no text. "" = nothing
        value     = text entered into box. "" = nothing
        alignment = Number to indicate how you want text aligned
                    (1=Automatic, 2=Left, 3=Center, 4=Right, 5=Justified)
        ]]
        --Name
        {
            pos       = {0.319,0.05,-2.01},
            rows      = 1,
            width     = 5000,
            font_size = 500,
            label     = "Click to type",
            value     = "",
            alignment = 2
        },
        --Equipment
        {
            pos       = {-0.715,0.05,0.627},
            rows      = 19,
            width     = 3350,
            font_size = 200,
            label     = "Click to type",
            value     = "",
            alignment = 2
        },
        --Notes
        {
            pos       = {-0.715,0.05,1.88},
            rows      = 7,
            width     = 3350,
            font_size = 200,
            label     = "Click to type",
            value     = "",
            alignment = 2
        },
        --credits
        {
            pos       = {-0.71,0.05,-0.591},
            rows      = 1,
            width     = 3000,
            font_size = 400,
            label     = "Click to type",
            value     = "",
            alignment = 3
        },
        --End of textboxes
    }
}

--Lua beyond this point, I recommend doing something more fun with your life

notion_page_id = ""

--Save function
function updateSave()
    saved_data = JSON.encode(ref_buttonData)
    if disableSave==true then saved_data="" end
    self.script_state = saved_data
end

--Startup procedure
function onload(saved_data)
    spawnedButtonCount = 0


    if disableSave==true then saved_data="" end
    if saved_data ~= "" then
        local loaded_data = JSON.decode(saved_data)
        ref_buttonData = loaded_data
    else
        ref_buttonData = defaultButtonData
    end

    createTextbox()
    createCounter()
    createCheckbox()
    spawnButton()

end

--Click functions for buttons

--Checks or unchecks the given box
function click_checkbox(tableIndex, buttonIndex)
    if ref_buttonData.checkbox[tableIndex].state == true then
        ref_buttonData.checkbox[tableIndex].state = false
        self.editButton({index=buttonIndex, label=""})
    else
        ref_buttonData.checkbox[tableIndex].state = true
        self.editButton({index=buttonIndex, label=string.char(10008)})
    end
    updateSave()
end

--Applies value to given counter display
function click_counter(tableIndex, buttonIndex, amount)
    ref_buttonData.counter[tableIndex].value = ref_buttonData.counter[tableIndex].value + amount
    self.editButton({index=buttonIndex, label=ref_buttonData.counter[tableIndex].value})
    updateSave()
end

--Updates saved value for given text box
function click_textbox(i, value, selected)
    if selected == false then
        ref_buttonData.textbox[i].value = value
        updateSave()
    end
end

--Dud function for if you have a background on a counter
function click_none() end



--Button creation



--Makes checkboxes
function createCheckbox()
    for i, data in ipairs(ref_buttonData.checkbox) do
        --Sets up reference function
        local buttonNumber = spawnedButtonCount
        local funcName = "checkbox"..i
        local func = function() click_checkbox(i, buttonNumber) end
        self.setVar(funcName, func)
        --Sets up label
        local label = ""
        if data.state==true then label=string.char(10008) end
        --Creates button and counts it
        self.createButton({
            label=label, click_function=funcName, function_owner=self,
            position=data.pos, height=data.size, width=data.size,
            font_size=data.size, scale=buttonScale,
            color=buttonColor, font_color=buttonFontColor
        })
        spawnedButtonCount = spawnedButtonCount + 1
    end
end

--Makes counters
function createCounter()
    for i, data in ipairs(ref_buttonData.counter) do
        --Sets up display
        local displayNumber = spawnedButtonCount
        --Sets up label
        local label = data.value
        --Sets height/width for display
        local size = data.size
        if data.hideBG == true then size = 0 end
        --Creates button and counts it
        self.createButton({
            label=label, click_function="click_none", function_owner=self,
            position=data.pos, height=size, width=size,
            font_size=data.size, scale=buttonScale,
            color=buttonColor, font_color=buttonFontColor
        })
        spawnedButtonCount = spawnedButtonCount + 1

        --Sets up add 1
        local funcName = "counterAdd"..i
        local func = function() click_counter(i, displayNumber, 1) end
        self.setVar(funcName, func)
        --Sets up label
        local label = "+"
        --Sets up position
        local offsetDistance = (data.size/2 + data.size/4) * (buttonScale[1] * 0.002)
        local pos = {data.pos[1] + offsetDistance, data.pos[2], data.pos[3]}
        --Sets up size
        local size = data.size / 2
        --Creates button and counts it
        self.createButton({
            label=label, click_function=funcName, function_owner=self,
            position=pos, height=size, width=size,
            font_size=size, scale=buttonScale,
            color=buttonColor, font_color=buttonFontColor
        })
        spawnedButtonCount = spawnedButtonCount + 1

        --Sets up subtract 1
        local funcName = "counterSub"..i
        local func = function() click_counter(i, displayNumber, -1) end
        self.setVar(funcName, func)
        --Sets up label
        local label = "-"
        --Set up position
        local pos = {data.pos[1] - offsetDistance, data.pos[2], data.pos[3]}
        --Creates button and counts it
        self.createButton({
            label=label, click_function=funcName, function_owner=self,
            position=pos, height=size, width=size,
            font_size=size, scale=buttonScale,
            color=buttonColor, font_color=buttonFontColor
        })
        spawnedButtonCount = spawnedButtonCount + 1
    end
end

function createTextbox()
    for i, data in ipairs(ref_buttonData.textbox) do
        --Sets up reference function
        local funcName = "textbox"..i
        local func = function(_,_,val,sel) click_textbox(i,val,sel) end
        self.setVar(funcName, func)

        self.createInput({
            input_function = funcName,
            function_owner = self,
            label          = data.label,
            alignment      = data.alignment,
            position       = data.pos,
            scale          = buttonScale,
            width          = data.width,
            height         = (data.font_size*data.rows)+24,
            font_size      = data.font_size,
            color          = bwuttonColor,
            font_color     = buttonFontColor,
            value          = data.value,
        })
    end
end



-- google sheets test
-- url = "https://docs.google.com/spreadsheets/d/1iZnUKW6rB7X8auHktbLzGTXOcYrkkTmCO8pkXfuUUiA/gviz/tq?tqx=out:json&gid=0"

function spawnButton()
    self.createButton({
    label="Load", click_function="load_button", function_owner=self,
    position={-1.2,0.05,-2.55}, width=300, height=200, font_size=60, color={0, 0.1, 0.9}
    })
    spawnedButtonCount = spawnedButtonCount + 1

    self.createButton({
    label="Save", click_function="save_button", function_owner=self,
    position={-0.6,0.05,-2.55}, width=300, height=200, font_size=60, color={0.81, 0.19, 0}
    })

    spawnedButtonCount = spawnedButtonCount + 1
end
--
-- function fetchDSheet()
--   WebRequest.get(url, function(a)
--       rawSheet = tostring(a.text)
--       rawLength = string.len(rawSheet)
--       jsonSheet = string.sub(rawSheet,48,rawLength-2) ---removes the extra characters and leaves JSON data.
--       gsheet = JSON.decode(jsonSheet)
--   end)
-- end

function load_button()
  -- get session ID
  o = getObjectFromGUID("2fb917")
  sessionID = o.getVar("mySessionID")
  if sessionID != "" then
    load_call(true)
  else
    print("Please enter session ID in order to load data")
  end
end


function load_call(replace)
  local headers = {
    ["Authorization"] = "INSERT_SECRET_HERE",
    ["Notion-Version"] = "2021-08-16"
  }

  local data = {
    ["sorts"] =
        {
          ["property"] = "Last ordered",
          ["direction"] = "ascending"
        }
  }

  -- Encode the data as JSON, so we can send it in our request body.
  local body = JSON.encode(data)

  local full_url = url .. sessionID .. "/query"

  -- Perform the request
  WebRequest.custom(full_url, "POST", true, body, headers, function(request)
      -- Check if the request failed to complete e.g. if your Internet connection dropped out.
      if request.is_error then
          print("Request failed: " .. request.error)
          return
      end

      -- Check that Github responded with JSON
      local contentType = request.getResponseHeader("Content-Type") or ""
      if contentType ~= "application/json" and not contentType:match("^application/json;") then
          -- We're expecting a JSON response only, if we get something else we'll print an error
          print("Uh oh! The response was something we didn't expect.")
          print("Content-Type: " .. contentType)
          return
      end

      -- Decode the JSON response body
      local responseData = JSON.decode(request.text)

      if replace == true then
        print("Loading character data for ", character_name, "...")
      end

      load_char_sheet(responseData, replace)

  end)

end

function printTable(t)
  for k,v in pairs(t) do
    print(v)
  end

end


function load_char_sheet(responseData, replace)

  local characters = responseData["results"]

  local num_chars = 0

  for k,v in pairs(characters) do
    num_chars = num_chars + 1
  end

  for i = 1, num_chars, 1 do

    local prop = characters[i]["properties"]

    local class = prop["Name"]["title"][1]["plain_text"]

    if class == character_name then


        notion_page_id = split(characters[i]["url"], "-")[2]
        -- notion_page_id = "533725dd37b6445f929731dcf516e3dc"

        if replace == false then
          return
        end

        local name = prop["Player"]["rich_text"][1]["plain_text"]
        local xp = prop["Exp"]["number"]
        local credits = prop["Credits"]["number"]
        local equipment = prop["Equipment"]["rich_text"][1]["plain_text"]
        local notes = prop["Notes"]["rich_text"][1]["plain_text"]
        local skillAArray = split(prop["Skill_A"]["rich_text"][1]["plain_text"], ",")
        local skillBArray = split(prop["Skill_B"]["rich_text"][1]["plain_text"], ",")
        local skillCArray = split(prop["Skill_C"]["rich_text"][1]["plain_text"], ",")

        -- print(class)
        -- print(name)
        -- print(xp)
        -- print(credits)
        -- print(equipment)
        -- print(notes)
        -- printTable(skillAArray)
        -- printTable(skillBArray)
        -- printTable(skillCArray)

        -- textboxes
        textArray = {name, equipment, notes, credits}
          for i = 1,4,1 do
            local params = {
              index = i - 1,
              value = textArray[i]
            }
            self.editInput(params)
            ref_buttonData.textbox[i].value = textArray[i]
          end

        --exp

         params = {
           index = 0,
           label = xp
         }
        ref_buttonData.counter[1].value = xp
        self.editButton(params)

        -- checkboxes
        for i = 6,13,1 do -- end at 14 for A, 22 for B, 29 for C
          local str = ""
          if skillAArray[i-5] == "1" then
            str=string.char(10008)
          end

          params = {
            index = i - 3,
            label = str
          }
          ref_buttonData.checkbox[i - 5].state = not (str == "")

          self.editButton(params)
        end

        for i = 14,21,1 do -- end at 14 for A, 22 for B, 29 for C
          local str = ""
          if skillBArray[i-13] == "1" then
            str=string.char(10008)
          end

          params = {
            index = i - 3,
            label = str
          }
          ref_buttonData.checkbox[i - 5].state = not (str == "")

          self.editButton(params)
        end


        for i = 22,29,1 do -- end at 14 for A, 22 for B, 29 for C
          local str = ""
          if skillCArray[i-21] == "1" then
            str=string.char(10008)
          end

          params = {
            index = i - 3,
            label = str
          }
          ref_buttonData.checkbox[i - 5].state = not (str == "")

          self.editButton(params)
        end

    end

  end

    -- TODO need to save the loaded inforation to the ref_buttonData
    updateSave()

end

function save_button()

  o = getObjectFromGUID("2fb917")
  sessionID = o.getVar("mySessionID")

  if notion_page_id == "" then
    local inputs = self.getInputs()
    if sessionID != "" then
      if inputs[2].value != "" then
        load_call(false)
        Wait.time(
            function()
              save_call()
            end,
            1
        )
        return
      else
        print("Error saving sheet")
        return
      end
    else
      print("Please enter session ID in order to save data")
      return
    end
  end

  save_call()
end

function save_call()

    print("Saving data for ", character_name, "...")

    local textArray = {}
    local exp = 0
    local skills = {}

    local inputs = self.getInputs()
    for i = 1,4,1 do
        textArray[i] = inputs[i].value
        -- print(textArray[i])
    end


    local buttons = self.getButtons()
    exp = buttons[1].label
    -- print(exp)

    -- checkboxes

    strA = {}
    for i = 4,11,1 do
      if (buttons[i].label ~= "") then
        strA[#strA + 1] = 1
      else
        strA[#strA + 1] = 0
      end
    end
    skills[1] = table.concat(strA, ",")

    strB = {}
    for i = 12,19,1 do
      if (buttons[i].label ~= "") then
        strB[#strB + 1] = 1
      else
        strB[#strB + 1] = 0
      end
    end
    skills[2] = table.concat(strB, ",")

    strC = {}
    for i = 20,27,1 do
      if (buttons[i].label ~= "") then
        strC[#strC + 1] = 1
      else
        strC[#strC + 1] = 0
      end
    end
    skills[3] = table.concat(strC, ",")


    local url = "https://api.notion.com/v1/pages/" .. notion_page_id

    local headers = {
      ["Authorization"] = "secret_eNsWLiLY8UPmu5m3MWF5mzwuvyhBo4GzInGESbkLFbi",
      ["Notion-Version"] = "2021-08-16",
      ["Content-Type"] = "application/json"
    }

      local expTable = {
          ["number"] = tonumber(exp)
      }
      local nameTable = {
          ["rich_text"] = {{
              ["text"] = {
                ["content"] = textArray[1]
              }
          }}
      }
      local equipmentTable = {
        ["rich_text"] = {{
            ["text"] = {
              ["content"] = textArray[2]
            }
        }}
      }
      local notesTable = {
        ["rich_text"] = {{
            ["text"] = {
              ["content"] = textArray[3]
            }
        }}
      }
      local creditsTable = {
          ["number"] = tonumber(textArray[4])
      }
      local skillsATable = {   ["rich_text"] = {{
            ["text"] = {
              ["content"] = skills[1]
            }
        }}
      }
      local skillsBTable = {   ["rich_text"] = {{
            ["text"] = {
              ["content"] = skills[2]
            }
        }}
      }
      local skillsCTable = {   ["rich_text"] = {{
            ["text"] = {
              ["content"] = skills[3]
            }
        }}
      }

    local data = {
        ["properties"] = {
          ["Exp"] = expTable,
          ["Credits"] = creditsTable,
          ["Notes"] = notesTable,
          ["Equipment"] = equipmentTable,
          ["Player"] = nameTable,
          ["Skill_A"] = skillsATable,
          ["Skill_B"] = skillsBTable,
          ["Skill_C"] = skillsCTable
        }
    }

    -- Encode the data as JSON, so we can send it in our request body.
    local body = JSON.encode(data)

    WebRequest.custom(url, "PATCH", true, body, headers, function(request)
        -- Check if the request failed to complete e.g. if your Internet connection dropped out.
        if request.is_error then
            print("Request failed: " .. request.error)
            return
        end

        -- Check that Github responded with JSON
        local contentType = request.getResponseHeader("Content-Type") or ""
        if contentType ~= "application/json" and not contentType:match("^application/json;") then
            -- We're expecting a JSON response only, if we get something else we'll print an error
            print("Uh oh! The response was something we didn't expect.")
            print("Content-Type: " .. contentType)
            return
        end

        -- Decode the JSON response body
        local responseData = JSON.decode(request.text)

        print("Save complete")

        params = {
          index = spawnedButtonCount - 1,
          color = {0, 1, 0}
        }
        self.editButton(params)

        Wait.time(
            function()
              params = {
                index = spawnedButtonCount - 1,
                color={0.81, 0.19, 0}
              }
              self.editButton(params)
            end,
              1
          )

    end)
end


function split(s, delimiter)
    result = {}
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match)
    end
    return result
end